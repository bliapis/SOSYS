// <auto-generated />
using System;
using System.Net.Http;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Threading.Tasks;
using Refit;
using LT.SO.Site.Models;
using LT.SO.Site.Models.Account;
using LT.SO.Site.Models.Gerencial.TipoPermissao;

/* ******** Hey You! *********
 *
 * This is a generated file, and gets rewritten every time you build the
 * project. If you want to edit it, you need to edit the mustache template
 * in the Refit package */

#pragma warning disable
namespace RefitInternalGenerated
{
    [ExcludeFromCodeCoverage]
    [AttributeUsage (AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate)]
    sealed class PreserveAttribute : Attribute
    {

        //
        // Fields
        //
        public bool AllMembers;

        public bool Conditional;
    }
}
#pragma warning restore

namespace LT.SO.Site.Services
{
    using RefitInternalGenerated;

    /// <inheritdoc />
    [ExcludeFromCodeCoverage]
    [DebuggerNonUserCode]
    [Preserve]
    partial class AutoGeneratedIAccountService : IAccountService        {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIAccountService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        public virtual Task<ServiceResult> PostLoginAsync(LoginModel request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostLoginAsync", new Type[] { typeof(LoginModel) });
            return (Task<ServiceResult>)func(Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<ServiceResult> GetUsuarios()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetUsuarios", new Type[] {  });
            return (Task<ServiceResult>)func(Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<ServiceResult> GetPermissoes()
        {
            var arguments = new object[] {  };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetPermissoes", new Type[] {  });
            return (Task<ServiceResult>)func(Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<ServiceResult> PostForgotPassword(ForgotPasswordModel request,string appUrl)
        {
            var arguments = new object[] { request,appUrl };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostForgotPassword", new Type[] { typeof(ForgotPasswordModel),typeof(string) });
            return (Task<ServiceResult>)func(Client, arguments);
        }

        /// <inheritdoc />
        public virtual Task<ServiceResult> PostResetPassword(ResetPasswordModel request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostResetPassword", new Type[] { typeof(ResetPasswordModel) });
            return (Task<ServiceResult>)func(Client, arguments);
        }

    }
}

namespace LT.SO.Site.Services
{
    using RefitInternalGenerated;

    /// <inheritdoc />
    [ExcludeFromCodeCoverage]
    [DebuggerNonUserCode]
    [Preserve]
    partial class AutoGeneratedITipoPermissaoService : ITipoPermissaoService        {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedITipoPermissaoService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        public virtual Task<ServiceResult> Pesquisar(TipoPermissaoFilter request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("Pesquisar", new Type[] { typeof(TipoPermissaoFilter) });
            return (Task<ServiceResult>)func(Client, arguments);
        }

    }
}
